name: Auto Build, AI-Fix & Multi Project Build

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  run-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install google-genai

      - name: Find projects
        id: find-projects
        run: |
          projects=""
          # Flutter projects
          for f in $(find . -name "pubspec.yaml"); do
            projects="$projects|flutter:$(dirname "$f")"
          done
          # Gradle projects
          for f in $(find . -name "build.gradle" -o -name "build.gradle.kts"); do
            if [[ "$f" == *"/app/"* ]]; then
              projects="$projects|gradle:$(dirname "$f")"
            fi
          done
          # Node projects
          for f in $(find . -name "package.json"); do
            projects="$projects|node:$(dirname "$f")"
          done
          # Python projects
          for f in $(find . -name "requirements.txt"); do
            projects="$projects|python:$(dirname "$f")"
          done

          projects=${projects#|}
          echo "PROJECTS=$projects" >> $GITHUB_ENV
          echo "Found projects: $projects"

      - name: Run AI auto-fixer
        id: ai-fix
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p .github/scripts
          # BEGIN Python script content - Pay EXTREME attention to indentation here
          cat > .github/scripts/ai_fix_all.py << 'EOF_PYTHON_SCRIPT'
import os
import glob
import time
from google import genai
# Configure genai client
genai.configure(api_key=os.environ["GEMINI_API_KEY"])

patterns = [
    "lib/**/*.dart",
    "**/pubspec.yaml",
    "**/build.gradle",
    "**/build.gradle.kts",
    "**/settings.gradle",
    "**/gradle.properties",
    "**/package.json",
    "**/requirements.txt",
    "firebase.json",
    "codemagic.yaml",
    "README.md"
]

files = sorted(set(sum([glob.glob(p, recursive=True) for p in patterns], [])))
report_lines = []
changed = 0

def prepare_text(s, max_chars=7000):
    if len(s) <= max_chars:
        return s
    half = max_chars//2
    return s[:half] + "\n\n/*...TRUNCATED...*/\n\n" + s[-half:]

for f in files:
    try:
        with open(f, "r", encoding="utf-8", errors="ignore") as fh:
            orig = fh.read()
    except Exception as e:
        report_lines.append(f"ERROR reading {f}: {e}")
        continue

    snippet = prepare_text(orig)
    prompt = f"You are an expert developer. Fix and upgrade this file:\nFILEPATH: {f}\n{snippet}"

    try:
        model = genai.GenerativeModel("gemini-pro") # Or "gemini-1.5-flash" depending on your API/Region
        resp = model.generate_content(prompt)
        new = resp.text.strip()
        if new and new != orig:
            with open(f, "w", encoding="utf-8") as fh:
                fh.write(new)
            report_lines.append(f"UPDATED: {f}")
            changed += 1
        else:
            report_lines.append(f"NOCHANGE: {f}")
    except Exception as e:
        report_lines.append(f"AI ERROR for {f}: {e}")

    time.sleep(1)

report_lines.insert(0, f"AI Fix run - files targeted: {len(files)} - updated: {changed}")
os.makedirs(".github", exist_ok=True)
with open(".github/ai_report.txt", "w", encoding="utf-8") as rf:
    rf.write("\n".join(report_lines))

print("AI fix completed. Report written to .github/ai_report.txt")
EOF_PYTHON_SCRIPT
          # END Python script content

          python .github/scripts/ai_fix_all.py 2>&1 | tee .github/ai_report.txt

          report_content=$(cat .github/ai_report.txt)
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$report_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ai-fix-${{ github.run_id }}
          title: "ðŸ¤– AI suggested fixes"
          commit-message: "ðŸ¤– AI applied automatic fixes"
          body: ${{ steps.ai-fix.outputs.report }}

      - name: Checkout AI branch if exists
        run: |
          BRANCH_NAME="ai-fix-${{ github.run_id }}"
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME" || git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
            git checkout "$BRANCH_NAME"
          else
            echo "AI branch not found; continuing on current branch"
          fi

      - name: Build projects
        run: |
          set -e
          mkdir -p artifacts
          if [ -z "$PROJECTS" ]; then
            echo "No projects found"
            exit 0
          fi
          IFS='|' read -ra PROJECT_ARRAY <<< "$PROJECTS"
          for project in "${PROJECT_ARRAY[@]}"; do
            type="${project%%:*}"
            path="${project#*:}"
            cd "$path" || continue
            case $type in
              flutter)
                flutter pub get || true
                flutter analyze || true
                flutter test || true
                flutter build apk --release || true
                mkdir -p "../../artifacts/flutter/$(basename "$path")"
                cp build/app/outputs/flutter-apk/app-release.apk "../../artifacts/flutter/$(basename "$path")/" 2>/dev/null || true
                ;;
              gradle)
                chmod +x gradlew || true
                ./gradlew assembleRelease || true
                mkdir -p "../../artifacts/gradle/$(basename "$path")"
                cp app/build/outputs/apk/release/*.apk "../../artifacts/gradle/$(basename "$path")/" 2>/dev/null || true
                ;;
              node)
                npm install || true
                npm run build || true
                mkdir -p "../../artifacts/node/$(basename "$path")"
                cp -r dist/* "../../artifacts/node/$(basename "$path")/" 2>/dev/null || true
                ;;
              python)
                pip install -r requirements.txt || true
                pytest || true
                mkdir -p "../../artifacts/python/$(basename "$path")"
                cp -r build/* "../../artifacts/python/$(basename "$path")/" 2>/dev/null || true
                ;;
            esac
            cd - >/dev/null
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          if-no-files-found: ignore
