name: Auto Build & AI-Fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ai-fix:
    name: 🤖 AI-Fix & Pull Request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install AI dependencies
        run: |
          pip install google-generativeai openai

      - name: Run AI Fix Script
        run: |
          python .github/scripts/ai_fix_all.py || echo "AI Fix failed"

      - name: Commit AI Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🤖 AI applied automatic fixes"
          branch: ai-fix-${{ github.run_id }}
          create_branch: true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ai-fix-${{ github.run_id }}
          title: "🤖 AI suggested fixes"
          body: "This PR contains fixes & completions generated by AI."
          base: main

  build:
    name: 🏗️ Multi Project Build
    needs: ai-fix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [flutter, gradle, node, python]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Flutter Build
      - name: Setup Flutter
        if: matrix.project == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Build Flutter APK & AAB
        if: matrix.project == 'flutter'
        run: |
          flutter pub get
          flutter build apk --release
          flutter build appbundle --release
          mkdir -p artifacts/flutter
          cp build/app/outputs/flutter-apk/app-release.apk artifacts/flutter/
          cp build/app/outputs/bundle/release/app-release.aab artifacts/flutter/

      # Gradle Build (Android)
      - name: Setup Java
        if: matrix.project == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build Gradle Project
        if: matrix.project == 'gradle'
        run: |
          cd android
          ./gradlew assembleRelease
          mkdir -p ../artifacts/gradle
          cp app/build/outputs/apk/release/*.apk ../artifacts/gradle/ || echo "No Gradle APK"

      # Node.js Build
      - name: Setup Node.js
        if: matrix.project == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build Node Project
        if: matrix.project == 'node'
        run: |
          npm install
          npm run build || echo "No build script"
          mkdir -p artifacts/node
          cp -r dist/* artifacts/node/ || echo "No dist folder"

      # Python (Kivy Buildozer)
      - name: Setup Python
        if: matrix.project == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Buildozer & Dependencies
        if: matrix.project == 'python'
        run: |
          sudo apt update
          sudo apt install -y build-essential git zip unzip openjdk-17-jdk python3-pip python3-setuptools python3-wheel
          pip install buildozer cython virtualenv

      - name: Build Kivy APK
        if: matrix.project == 'python'
        run: |
          cd python_project || echo "No python_project dir"
          buildozer android debug || echo "Buildozer failed"
          mkdir -p ../artifacts/python
          cp bin/*.apk ../artifacts/python/ || echo "No APK built"

      # Upload artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.project }}
          path: artifacts/${{ matrix.project }}

  notify:
    name: 📢 Notify Result
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Job Summary
        run: |
          echo "✅ Build Completed. Download artifacts from Actions tab." >> $GITHUB_STEP_SUMMARY
