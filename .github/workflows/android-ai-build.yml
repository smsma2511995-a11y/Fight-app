name: Auto Build, AI-Fix & Multi Project Build

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  run-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Find projects
        id: find-projects
        run: |
          projects=""
          # Use more specific find commands to avoid false positives
          while IFS= read -r -d '' f; do
            projects="${projects}|flutter:$(dirname "$f")"
          done < <(find . -name "pubspec.yaml" -type f -print0)
          
          while IFS= read -r -d '' f; do
            if [[ "$f" == *"/app/"* ]]; then
              projects="${projects}|gradle:$(dirname "$f")"
            fi
          done < <(find . -name "build.gradle" -type f -print0)
          
          while IFS= read -r -d '' f; do
            projects="${projects}|node:$(dirname "$f")"
          done < <(find . -name "package.json" -type f -print0)
          
          while IFS= read -r -d '' f; do
            projects="${projects}|python:$(dirname "$f")"
          done < <(find . -name "requirements.txt" -type f -print0)

          projects="${projects#'|'}"
          echo "PROJECTS=${projects}" >> $GITHUB_ENV
          echo "Found projects: ${projects}"

      - name: Setup Python for AI fix
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Run AI auto-fixer
        id: ai-fix
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p .github/scripts
          # Create default AI script if not exists
          if [ ! -f .github/scripts/ai_fix_all.py ]; then
            cat > .github/scripts/ai_fix_all.py << 'EOL'
import os
import google.generativeai as genai

genai.configure(api_key=os.environ['GEMINI_API_KEY'])
model = genai.GenerativeModel('gemini-pro')

def analyze_code(file_path):
    try:
        with open(file_path, 'r') as f:
            content = f.read()
        response = model.generate_content(f"Review this code for errors and suggest fixes:\n{content}")
        return response.text
    except Exception as e:
        return f"Error analyzing {file_path}: {str(e)}"

print("AI code analysis completed")
EOL
          fi
          
          python .github/scripts/ai_fix_all.py 2>&1 | tee .github/ai_report.txt
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat .github/ai_report.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ai-fix-${{ github.run_id }}
          title: "ðŸ¤– AI suggested fixes"
          commit-message: "ðŸ¤– AI applied automatic fixes"
          body: ${{ steps.ai-fix.outputs.report }}

      - name: Build projects
        run: |
          mkdir -p artifacts
          IFS='|' read -ra projects <<< "$PROJECTS"
          for project in "${projects[@]}"; do
            IFS=':' read -r type path <<< "$project"
            echo "Building $type project at $path"
            cd "$path"
            
            case $type in
              flutter)
                flutter pub get
                flutter build apk --release
                mkdir -p "../../artifacts/flutter"
                cp build/app/outputs/flutter-apk/*.apk ../../artifacts/flutter/
                ;;
              gradle)
                ./gradlew assembleRelease
                mkdir -p "../../artifacts/gradle"
                cp app/build/outputs/apk/release/*.apk ../../artifacts/gradle/
                ;;
              node)
                npm install
                npm run build
                mkdir -p "../../artifacts/node"
                cp -r dist/* ../../artifacts/node/
                ;;
              python)
                pip install -r requirements.txt
                mkdir -p "../../artifacts/python"
                # Add python specific build commands here
                ;;
            esac
            cd - >/dev/null
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          if-no-files-found: ignore
