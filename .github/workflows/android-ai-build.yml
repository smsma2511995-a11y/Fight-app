name: Auto Build, AI-Fix & Multi Project Build

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  run-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          python -m pip install --upgrade pip
          pip install google-genai

      - name: Find projects
        id: find-projects
        run: |
          projects=""
          # Flutter projects
          for f in $(find . -name "pubspec.yaml"); do
            projects="$projects|flutter:$(dirname "$f")"
          done
          # Gradle projects
          for f in $(find . -name "build.gradle" -o -name "build.gradle.kts"); do
            if [[ "$f" == *"/app/"* ]]; then
              projects="$projects|gradle:$(dirname "$f")"
            fi
          done
          # Node projects
          for f in $(find . -name "package.json"); do
            projects="$projects|node:$(dirname "$f")"
          done
          # Python projects
          for f in $(find . -name "requirements.txt"); do
            projects="$projects|python:$(dirname "$f")"
          done

          projects=${projects#|}
          echo "PROJECTS=$projects" >> $GITHUB_ENV
          echo "Found projects: $projects"

      - name: Run AI auto-fixer
        id: ai-fix
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p .github/scripts
          python .github/scripts/ai_fix_all.py
          
          # Output to PR body
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat .github/ai_report.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ai-fix-${{ github.run_id }}
          title: "ðŸ¤– AI suggested fixes"
          commit-message: "ðŸ¤– AI applied automatic fixes"
          body: ${{ steps.ai-fix.outputs.report }}

      - name: Checkout AI branch if exists
        run: |
          BRANCH_NAME="ai-fix-${{ github.run_id }}"
          if git fetch origin "$BRANCH_NAME" 2>/dev/null; then
            git checkout "$BRANCH_NAME"
            echo "Checked out AI branch: $BRANCH_NAME"
          else
            echo "AI branch not found; continuing on current branch"
          fi

      - name: Build projects
        run: |
          set -e
          mkdir -p artifacts
          
          if [ -z "$PROJECTS" ]; then
            echo "No projects found"
            exit 0
          fi
          
          IFS='|' read -ra PROJECT_ARRAY <<< "$PROJECTS"
          for project in "${PROJECT_ARRAY[@]}"; do
            if [ -z "$project" ]; then
              continue
            fi
            
            type="${project%%:*}"
            path="${project#*:}"
            echo "---- Building $type at $path ----"
            
            cd "$path" || continue

            case $type in
              flutter)
                flutter pub get || echo "Flutter pub get failed"
                flutter analyze || echo "Flutter analyze failed"
                flutter test || echo "Flutter test failed"
                flutter build apk --release || echo "Flutter build failed"
                mkdir -p "../../artifacts/flutter/$(basename "$path")"
                cp build/app/outputs/flutter-apk/app-release.apk "../../artifacts/flutter/$(basename "$path")/" 2>/dev/null || true
                ;;
              gradle)
                chmod +x gradlew 2>/dev/null || true
                ./gradlew assembleRelease || echo "Gradle build failed"
                mkdir -p "../../artifacts/gradle/$(basename "$path")"
                cp app/build/outputs/apk/release/*.apk "../../artifacts/gradle/$(basename "$path")/" 2>/dev/null || true
                ;;
              node)
                npm install || echo "NPM install failed"
                npm run lint || echo "NPM lint failed"
                npm test || echo "NPM test failed"
                npm run build || echo "NPM build failed"
                mkdir -p "../../artifacts/node/$(basename "$path")"
                cp -r dist/* "../../artifacts/node/$(basename "$path")/" 2>/dev/null || true
                ;;
              python)
                pip install -r requirements.txt || echo "Pip install failed"
                pytest || echo "Pytest failed"
                mkdir -p "../../artifacts/python/$(basename "$path")"
                cp -r build/* "../../artifacts/python/$(basename "$path")/" 2>/dev/null || true
                ;;
            esac

            cd - >/dev/null || true
          done

          if [ -z "$(find artifacts -type f)" ]; then
            echo "No artifacts were generated" > artifacts/README.txt
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
          if-no-files-found: ignore
